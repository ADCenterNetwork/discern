@startuml new-model-analyzer
' classes
class ProjectAnalyser {
    + {static} findPatterns(p: SoftwareProject, patternFinders: List<AbstractPatternFinder>): PatternSearchResult
    + {static} findPatternCalls(p: SoftwareProject, patternFinders: List<AbstractPatternFinder>): PatternCallsAnalysisResult
    + {static} generateLabels(p: SoftwareProject, labeller: ProjectLabeller): LabelingProcessResult
}

abstract class AbstractPatternFinder {
    + {abstract} findPatterns(p: SoftwareProject): PatternSearchResult
}

class GeneratorPatternFinder extends AbstractPatternFinder {

    + findPatterns(p: SoftwareProject): PatternSearchResult
    
    - findYieldKeywords(): void
    - findCalls(): void
}

class ObserverPatternFinder extends AbstractPatternFinder {
    + findPatterns(p: SoftwareProject): PatternSearchResult
}

class DecoratorPatternFinder extends AbstractPatternFinder {
    + findPatterns(p: SoftwareProject): PatternSearchResult
}

abstract class AbstractProjectLabeller {
    + {abstract} generateLabels(p: SoftwareProject): LabelingProcessResult
}

class GeneratorProjectLabeller extends AbstractProjectLabeller {
    + generateLabels(p: SoftwareProject): LabelingProcessResult
}

class ObserverProjectLabeller extends AbstractProjectLabeller {
    + generateLabels(p: SoftwareProject): LabelingProcessResult
}

class DecoratorProjectLabeller extends AbstractProjectLabeller {
    + generateLabels(p: SoftwareProject): LabelingProcessResult
}

abstract class AbstractPatternCallFinder {
    + {abstract} findPatternCalls(p: SoftwareProject): PatternCallsAnalysisResult
}

class GeneratorPatternCallFinder extends AbstractPatternCallFinder {
    + findPatternCalls(p: SoftwareProject): PatternCallsAnalysisResult
}

class ObserverPatternCallFinder extends AbstractPatternCallFinder {
    + findPatternCalls(p: SoftwareProject): PatternCallsAnalysisResult
}

class DecoratorPatternCallFinder extends AbstractPatternCallFinder {
    + findPatternCalls(p: SoftwareProject): PatternCallsAnalysisResult
}

class SoftwareProject {
    - projectFiles: List<ProjectFile>
    + construct_from_folder(path: String): SoftwareProject
    - addFile(file: ProjectFile): void
}

'class PythonSoftwareProject extends SoftwareProject {
'    + construct_from_folder(path: String): SoftwareProject
'}

'class JavaSoftwareProject extends SoftwareProject {
'    + construct_from_folder(path: String): SoftwareProject
'}

class ProjectFile {
    - fileName: String
    - filePath: String
    - fileType: String
    + getFileName(): String
    + getFilePath(): String
    + getFileType(): String
}

class SourceMap implements CSVExportable {
    + exportToCSV(): CSVFolderStructure
}

class SourceMapRow {
    - nodeId: Integer
    - nodeName: String
    - nodeType: Integer
    - nodeTypeName: String
    - sourcePath: String
    - nodeTypeAncestorLevel1: Integer
    - nodeTypeAncestorLevel2: Integer
    - nodeTypeAncestorLevel3: Integer

    + getNodeId(): Integer
    + getNodeName(): String
    + getNodeType(): Integer
    + getNodeTypeName(): String
    + getSourcePath(): String
}

abstract class ProcessResult {

}

class PatternSearchResult extends ProcessResult {

'    - abstractSyntaxTree: AbstractSyntaxTree
'    - classifiedNodes: List<ClassifiedASTNode>

'    + getAST(): AbstractSyntaxTree
'    + getClassifiedNodes(): List<ClassifiedASTNOde>
}

class PatternCallsAnalysisResult extends ProcessResult {

}

class LabelingProcessResult extends ProcessResult {

}

class AbstractSyntaxTree implements CSVExportable {
    - root: ASTNode
    + exportToCSV(): CSVFolderStructure
    + getRoot(): ASTNode
    + walk(): Iterator<ASTNode>
    + getSourceMap(): SourceMap
}

class ASTNode {
    - nodeName: String
    - nodeType: Integer
    - nodeTypeName: String
    - childNodes: List<ASTNode>

    + getNodeName(): String
    + getNodeType(): Integer
    + getNodeTypeName(): String
    + getChildNodes(): List<ASTNode>

}

class ClassifiedSyntaxTree implements CSVExportable {
    - root: ClassifiedASTNode
    + exportToCSV(): CSVFolderStructure
    + getRoot(): ClassifiedASTNode
    + walk(): Iterator<ClassifiedASTNode>
    + getSourceMap(): SourceMap
}

class ClassifiedASTNode {
    - node: ASTNode
    - patternsFound: List<String>
    
    + getPatternsFound(): List<String>
    + getNodeName(): String
    + getNodeType(): Integer
    + getNodeTypeName(): String
    + getChildNodes(): List<ASTNode>
}

class CSVFolderStructure {
    - cvsFiles: List<CSVFile>
    + getFolderLocation(): String
}

class CSVFile {
    + getFileLocation(): String
}

interface CSVExportable {
    + exportToCSV(): CSVFolderStructure
}

'Relationships between clases and interfaces

'ProjectAnalyser entry point (main method)
ProjectAnalyser "one" *--> "many" AbstractPatternFinder : uses
ProjectAnalyser "one" *--> "many" AbstractProjectLabeller : uses
ProjectAnalyser "one" *--> "many" AbstractPatternCallFinder : uses
ProjectAnalyser ..> SoftwareProject : analyzes
ProjectAnalyser "one" ..> "one" ProcessResult : obtains

'Results
PatternSearchResult "one" ..> "one" ClassifiedSyntaxTree : holds
LabelingProcessResult "one" ..> "one" CSVExportable : holds
PatternCallsAnalysisResult "one" ..> "one" CSVExportable : holds

'Software Project 
SoftwareProject "one" *--> "many" ProjectFile : contains

'SourceMap
SourceMap "one" *--> "many" SourceMapRow : contains

'AbstractSyntaxTree
AbstractSyntaxTree ..> SourceMap : generates
AbstractSyntaxTree "one" *--> "one" ASTNode : root

'ASTNode recursive relationship
ASTNode "zero" *--> "many" ASTNode : children

ClassifiedSyntaxTree "one" *--> "one" ClassifiedASTNode : root
ClassifiedASTNode "one" *--> "one" ASTNode : node

'CSVFolderStructure
CSVFolderStructure "one" *--> "many" CSVFile : contains

'Interface CSVExportable
CSVExportable ..> CSVFolderStructure : returns

@enduml